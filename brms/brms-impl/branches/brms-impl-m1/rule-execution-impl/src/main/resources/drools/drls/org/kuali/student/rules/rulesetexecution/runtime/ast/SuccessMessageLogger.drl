package org.kuali.student.rules.runtime.ast.success
 
import org.kuali.student.rules.internal.common.runtime.ast.BooleanNode;
import org.kuali.student.rules.internal.common.runtime.ast.BinaryTree;
 
rule "AND"
	#salience 1
	#no-loop true
	when
		n : BooleanNode( label == "*", leftNode.value == true, rightNode.value == true, leftNode.nodeMessage != "null", rightNode.nodeMessage != "null" )
	then
		String logMessage = n.getLeftNode().getNodeMessage() + " AND " + n.getRightNode().getNodeMessage();
		n.setNodeMessage(logMessage);
        //System.out.println( logMessage + " (rule=\"AND\")");
		
		BooleanNode parent = n.getParent();
		if (parent != null){
			update(parent);
		}
end


rule "OR2"
	#no-loop true
	when
		n : BooleanNode( label == "+", leftNode.value == true, rightNode.value == true, leftNode.nodeMessage != "null", rightNode.nodeMessage != "null" )
	then
		String logMessage = n.getLeftNode().getNodeMessage() + " OR " + n.getRightNode().getNodeMessage();
		n.setNodeMessage(logMessage);
		//System.out.println( logMessage + " (rule=\"OR2\")");
		
		BooleanNode parent = n.getParent();
		if (parent != null){
			update(parent);
		}
end

rule "OR1"
	#no-loop true
	when
		n : BooleanNode( label == "+", (leftNode.value == false && rightNode.value == true && rightNode.nodeMessage != "null" ) || 
		(leftNode.value == true && rightNode.value == false && leftNode.nodeMessage != "null") )
	then
		String logMessage = "test";
		
		if (n.getLeftNode().getValue() == true)
			logMessage = n.getLeftNode().getNodeMessage();
		else if (n.getRightNode().getValue() == true)
			logMessage = n.getRightNode().getNodeMessage();
		
		n.setNodeMessage(logMessage);
		//System.out.println( logMessage + " (rule=\"OR1\")");
		
		BooleanNode parent = n.getParent();
		if (parent != null){
			update(parent);
		}
end
