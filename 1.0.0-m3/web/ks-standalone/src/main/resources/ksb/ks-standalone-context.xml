<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<import resource="classpath:ksb/ks-core-context.xml" />
	<import resource="classpath:ksb/ks-lu-context.xml" />
	
	<bean id="systemPropertyConfigurer"
		class="org.kuali.student.common.util.SystemPropertyConfigurer">
		<property name="properties">
			<map>
			  <entry key="derby.system.home" value="target" />
			  <entry key="derby.drda.startNetworkServer" value="true" />
			</map>
		</property>
	</bean>
	
	<bean class="org.kuali.student.common.util.ModPropertyPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>

	<bean id="config" class="org.kuali.student.rice.config.spring.NestedConfigFactoryBean" depends-on="systemPropertyConfigurer">
		<property name="configLocations">
			<list>
				<value>classpath:META-INF/ks-standalone-config.xml</value>
			</list>
		</property>
	</bean>

	<bean id="configProperties"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="config" />
		<property name="targetMethod" value="getProperties" />
	</bean>

	<bean id="propconfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="properties" ref="configProperties" />
	</bean>

	<bean class="org.kuali.rice.core.resourceloader.RiceSpringResourceLoaderConfigurer">
		<property name="localServiceName" value="KSCoreContext"/>
	</bean>

	
    <import resource="classpath:org/kuali/rice/core/RiceJTASpringBeans.xml"/>
    <import resource="classpath:org/kuali/rice/core/RiceDerbyDataSourceSpringBeans.xml" />

	<bean id="rice" class="org.kuali.rice.core.config.RiceConfigurer" depends-on="propconfig">
		<property name="dataSource" ref="riceDataSource" />
		<property name="nonTransactionalDataSource" ref="riceNonTransactionalDataSource" />
		<property name="transactionManager" ref="jtaTransactionManager" />
		<property name="userTransaction" ref="jtaUserTransaction" />
		<property name="rootConfig" ref="config" />
		<property name="serviceNamespace" value="${serviceNamespace}" />
		<property name="ksbConfigurer">
			<bean class="org.kuali.rice.ksb.messaging.config.KSBConfigurer">
                <property name="serviceServletUrl" value="${serviceServletUrl}" />
			</bean>
		</property>
	</bean>

    <!-- JTA -->
<!--    <bean id="jtaTxManager" class="org.springframework.transaction.jta.JtaTransactionManager">-->
<!--        <property name="transactionManager" ref="jotm" />-->
<!--        <property name="userTransaction" ref="jotm"/>-->
<!--        <property name="allowCustomIsolationLevels" value="true"/>-->
<!--    </bean>-->
<!---->
<!--    <tx:annotation-driven transaction-manager="jtaTxManager" />-->
<!--	<aop:aspectj-autoproxy proxy-target-class="true" />-->


	<bean id="mapExceptionAdvisor"
		class="org.kuali.student.common.util.ExceptionMappingAdvice">
		<property name="defaultException"
			value="org.kuali.student.core.exceptions.OperationFailedException" />
		<property name="exceptionMapping">
			<map>
				<entry key="javax.persistence.EntityExistsException"
					value="org.kuali.student.core.exceptions.AlreadyExistsException" />
				<entry
					key="org.hibernate.exception.ConstraintViolationException"
					value="org.kuali.student.core.exceptions.AlreadyExistsException" />
			</map>
		</property>
	</bean>
	<aop:config>
		<aop:aspect id="dataAccessToBusinessException"
			ref="mapExceptionAdvisor">
			<aop:after-throwing
				pointcut="execution(* org.kuali.student.core.organization.service.*.*(..))"
				method="afterThrowing" throwing="ex" />
			<aop:after-throwing
				pointcut="execution(* org.kuali.student.core.person.service.*.*(..))"
				method="afterThrowing" throwing="ex" />
			<aop:after-throwing
				pointcut="execution(* org.kuali.student.core.atp.service.*.*(..))"
				method="afterThrowing" throwing="ex" />
			<aop:after-throwing
				pointcut="execution(* org.kuali.student.core.messages.service.*.*(..))"
				method="afterThrowing" throwing="ex" />
		</aop:aspect>
	</aop:config>
	
	


</beans>