<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
    <import resource="classpath:dao.xml"/>
   <!-- Infrastructure code which handles invocation for all service impls -->
  <bean id = "layeringAspects" class="org.kuali.student.enrollment.lpr.service.aspect.ServiceAspects">
    <!-- Declare various impls here, put them in the order that you want them invoked -->
    <property name="serviceEntryDecorators">
      <list>
        <ref bean="lprServiceAuthorization" />
      </list>
    </property>
    <property name="includeThrowableClassList">
      <list>
       <ref bean="kualiInvalidParamException"/>
       <ref bean="kualiReadOnlyException"/>
       <ref bean="kualiOperationFailedException"/>
      </list>
   </property>
   </bean>

    <!-- declare beans here -->
    <bean id="lprService" class="org.kuali.student.enrollment.lpr.service.impl.LuiPersonRelationServiceImpl">
        <property name="lprDao" ref="lprDao"/>
    </bean>
    <bean id="lprUtility" class="org.kuali.student.enrollment.lpr.service.util.ConcreteLPRUtility"/>

    <!-- declare impls here -->

     <!--  declare all service exceptions here or in KS core -->
    <bean id="kualiInvalidParamException" class="org.kuali.student.core.exceptions.InvalidParameterException" />
    <bean id="kualiOperationFailedException" class="org.kuali.student.core.exceptions.OperationFailedException" />
    <bean id="kualiReadOnlyException" class="org.kuali.student.core.exceptions.ReadOnlyException" />
  
    <!--  decorator layering declaration  --> 
    <bean id="lprServiceDecorator" class="org.kuali.student.enrollment.lpr.service.decorators.LuiPersonRelationServiceDecorator">
      <property name="lprService" ref="lprService"/>
    </bean>  
   
    <bean id="permissionService" class="org.kuali.rice.kim.service.impl.PermissionServiceImpl"/>
    
    <bean id="lprServiceAuthorization" class="org.kuali.student.enrollment.lpr.service.decorators.LuiPersonRelationServiceAuthorizationDecorator">
      <property name="nextDecorator" ref="lprServiceValidation"/>
      <property name="permissionService" ref="permissionService"/>
    </bean>

     
    <bean id="lprServiceValidation" class="org.kuali.student.enrollment.lpr.service.decorators.LuiPersonRelationServiceValidationDecorator">
        <property name="nextDecorator" ref="lprServiceDecorator"/>
    </bean> 
   
    <bean id = "luiMockImpl" class="org.kuali.student.enrollment.lui.mock.LuiServiceMockPersistenceImpl" />
    <bean id = "mockPermissionService" class="org.kuali.student.kim.permission.mock.PermissionServiceMockImpl" />
    <bean id = "mockIdentityService" class="org.kuali.student.kim.identity.mock.IdentityServiceMockImpl" />
    
    <aop:config>
     <aop:aspect id="serviceLayeringAspect" ref="layeringAspects">
      <!-- For exceptions use expression = "execution() and  !execution()" -->
       <aop:pointcut id="commonBeforeConcerns" expression="execution(* org.kuali.student.enrollment.lpr.service.impl..*.*(..))"/>
       <aop:before pointcut-ref="commonBeforeConcerns" method="beforeInvokingService"/>
       <aop:pointcut id="servicesLayeringPointcut" expression="execution(* org.kuali.student.enrollment.lpr.service.impl..*.*(..))"/>
       <aop:around pointcut-ref="servicesLayeringPointcut" method="invokeFirstDecorator"/>
       <aop:pointcut id="lprExceptionPointCut" expression="execution(* org.kuali.student.enrollment.lpr.service..*.*(..))"/>
       <aop:after-throwing pointcut-ref="lprExceptionPointCut" throwing="ex" method="handleExceptions"/>
     </aop:aspect>
    </aop:config>
     
</beans>