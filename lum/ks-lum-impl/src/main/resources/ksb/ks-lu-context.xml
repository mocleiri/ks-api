<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://www.springframework.org/schema/tx
                           http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
                           http://www.springframework.org/schema/aop
                           http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<!-- This context requires that a spring Transaction Manager named 'transactionManager' be defined -->

    <import resource="classpath:statement-context.xml"/>
	
	<bean id="propertyPlaceholder"
        class="org.kuali.rice.core.config.spring.RiceConfigPropertyPlaceholderConfigurer" />

	<bean class="org.kuali.rice.core.resourceloader.RiceSpringResourceLoaderConfigurer">
		<property name="localServiceName" value="KSLumContext"/>	
	</bean>
	
	<bean id="ks.messageServiceMock" class="org.kuali.student.core.messages.service.impl.MessageServiceMock">
		<property name="messageFiles">
			<list>
				<value>classpath:org\kuali\student\common\ui\gwt-messages.xml</value>
				<value>classpath:org\kuali\student\lum\lu\ui\course\gwt-messages.xml</value>				
			</list>
		</property>
	</bean>

	<bean id="serviceValidator" class="org.kuali.student.common.validator.Validator">
		<property name="messageService" ref="ks.messageServiceMock"/>		
	</bean>

    <!-- JTA -->
    <tx:annotation-driven transaction-manager="transactionManager" />
	
	<bean id="lumDataSource" class="org.kuali.rice.core.database.DerbyXAPoolDataSource">
       <property name="transactionManager" ref="userTransaction" />
        <property name="driverClassName" value="${ks.lum.datasource.driver.name}" />
        <property name="maxSize" value="${ks.lum.datasource.maxSize}" />
        <property name="minSize" value="${ks.lum.datasource.minSize}" />
        <property name="maxWait" value="${ks.lum.datasource.maxWait}" />
        <property name="validationQuery" value="${ks.lum.datasource.validationQuery}" />
        <property name="url" value="${ks.lum.datasource.url}" />
        <property name="username" value="${ks.lum.datasource.username}" />
        <property name="password" value="${ks.lum.datasource.password}" />          
	</bean>

    <!-- Default JPA EntityManagerFactory -->
    <bean id="lumDefaultEntityManagerFactory" abstract="true"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform"
                    value="${ks.lum.jpa.DatabasePlatform}" />
                <property name="showSql" value="${ks.lum.jpa.showSql}" />
                <property name="generateDdl" value="${ks.lum.jpa.generateDdl}" />
            </bean>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.transaction.manager_lookup_class" value="${ks.lum.jpa.JpaProperties.hibernate.transaction.manager_lookup_class}"/>
                <entry key="hibernate.hbm2ddl.auto" value="${ks.lum.jpa.JpaProperties.hibernate.hbm2ddl.auto}"/>
            </map>
        </property>
    </bean>

	<!-- Learning Service Config -->
	<bean id="luEntityManagerFactory" parent="lumDefaultEntityManagerFactory">
		<property name="persistenceUnitName" value="Lu"/>
		<property name="persistenceXmlLocation"
			value="classpath:META-INF/lu-persistence.xml" />
		<property name="dataSource" ref="lumDataSource" />
	</bean>

    <bean id="luEntityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
        <property name="entityManagerFactory" ref="luEntityManagerFactory" />
    </bean>
	
	<bean id="luDao"
		class="org.kuali.student.lum.lu.dao.impl.LuDaoImpl">
        <property name="em" ref="luEntityManager" />		
	</bean>

	<bean id="luSearchManager"
		class="org.kuali.student.core.search.service.impl.SearchManagerImpl"
		autowire="byType">
		<constructor-arg index="0" value="classpath:lu-search-config.xml" />
	</bean>

	<bean id="luDictionary" class="org.kuali.student.core.dictionary.service.impl.DictionaryServiceSpringImpl">
		<constructor-arg index="0" value="classpath:lu-dictionary-config.xml" />	
	</bean>

	<bean id="luServiceImpl"
		class="org.kuali.student.lum.lu.service.impl.LuServiceImpl">
		<property name="luDao" ref="luDao" />
        <property name="searchManager" ref="luSearchManager" />
        <property name="dictionaryServiceDelegate" ref="luDictionary" />
        <property name="validator" ref="serviceValidator"/>
	</bean>
	
    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
        <property name="serviceDefinition">     
            <bean class="org.kuali.rice.ksb.messaging.SOAPServiceDefinition">
                <property name="jaxWsService" value="true" />
                <property name="service" ref="luServiceImpl" />
                <property name="serviceInterface" value="org.kuali.student.lum.lu.service.LuService" />
                <property name="localServiceName" value="LuService" />
                <property name="serviceNameSpaceURI" value="http://student.kuali.org/wsdl/lu" />
                <property name="busSecurity" value="${ks.lum.bus.security}" />
            </bean>
        </property>
    </bean>

	<!-- Statement Service Config -->
    <bean id="statementDefaultEntityManagerFactory" abstract="true"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="jpaVendorAdapter">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                <property name="databasePlatform"
                    value="${ks.lum.jpa.DatabasePlatform}" />
                <property name="showSql" value="${ks.lum.jpa.showSql}" />
                <property name="generateDdl" value="${ks.lum.jpa.generateDdl}" />
            </bean>
        </property>
        <property name="jpaPropertyMap">
            <map>
                <entry key="hibernate.transaction.manager_lookup_class" value="${ks.lum.jpa.JpaProperties.hibernate.transaction.manager_lookup_class}"/>
                <entry key="hibernate.hbm2ddl.auto" value="${ks.lum.jpa.JpaProperties.hibernate.hbm2ddl.auto}"/>
            </map>
        </property>
    </bean>

	<bean id="statementEntityManagerFactory" parent="statementDefaultEntityManagerFactory">
		<property name="persistenceUnitName" value="Statement"/>
		<property name="persistenceXmlLocation"
			value="classpath:META-INF/statement-persistence.xml" />
		<property name="dataSource" ref="lumDataSource" />
	</bean>

    <bean id="statementEntityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
        <property name="entityManagerFactory" ref="statementEntityManagerFactory" />
    </bean>
	
	<bean id="statementDao"
		class="org.kuali.student.brms.statement.dao.impl.StatementDaoImpl">
        <property name="em" ref="statementEntityManager" />		
	</bean>

	<bean id="statementSearchManager"
		class="org.kuali.student.core.search.service.impl.SearchManagerImpl"
		autowire="byType">
		<constructor-arg index="0" value="classpath:lu-search-config.xml" />
	</bean>

	<bean id="statementDictionary" class="org.kuali.student.core.dictionary.service.impl.DictionaryServiceSpringImpl">
		<constructor-arg index="0" value="classpath:lu-dictionary-config.xml" />	
	</bean>

    <bean id="statementAssembler"
        class="org.kuali.student.brms.statement.service.impl.StatementAssembler">
        <property name="statementDao" ref="statementDao"/>
    </bean>
    
	<bean id="statementServiceImpl"
		class="org.kuali.student.brms.statement.service.impl.StatementServiceImpl">
        <property name="statementAssembler" ref="statementAssembler"/>
		<property name="statementDao" ref="statementDao" />
        <property name="searchManager" ref="statementSearchManager" />
        <property name="dictionaryServiceDelegate" ref="statementDictionary" />
        <property name="naturalLanguageTranslator" ref="naturalLanguageTranslator" />
	</bean>
	
    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
        <property name="serviceDefinition">     
            <bean class="org.kuali.rice.ksb.messaging.SOAPServiceDefinition">
                <property name="jaxWsService" value="true" />
                <property name="service" ref="statementServiceImpl" />
                <property name="serviceInterface" value="org.kuali.student.brms.statement.service.StatementService" />
                <property name="localServiceName" value="StatementService" />
                <property name="serviceNameSpaceURI" value="http://student.kuali.org/wsdl/statement" />
                <property name="busSecurity" value="${ks.lum.bus.security}" />
            </bean>
        </property>
    </bean>

	<!-- Learning Objective service config -->
	<bean id="loEntityManagerFactory" parent="lumDefaultEntityManagerFactory">
		<property name="persistenceUnitName" value="Lo"/>
		<property name="persistenceXmlLocation"
			value="classpath:META-INF/lo-persistence.xml" />
		<property name="dataSource" ref="lumDataSource" />
	</bean>

    <bean id="loEntityManager" class="org.springframework.orm.jpa.support.SharedEntityManagerBean">
        <property name="entityManagerFactory" ref="loEntityManagerFactory" />
    </bean>

	<bean id="loDao"
		class="org.kuali.student.lum.lo.dao.impl.LoDaoImpl">
        <property name="em" ref="loEntityManager" />		
	</bean>

	<bean id="loSearchManager"
		class="org.kuali.student.core.search.service.impl.SearchManagerImpl"
		autowire="byType">
		<constructor-arg index="0" value="classpath:lo-search-config.xml" />
		<property name="crossSearchManager" ref="lumCrossServiceSearchManager"/>
	</bean>

	<bean id="lumCrossServiceSearchManager" class="org.kuali.student.core.search.service.impl.CrossSearchManager">
		<property name="searchDispatcher" ref="lumSearchDispatcher"/>
	</bean>
	
	<bean id="lumSearchDispatcher" class="org.kuali.student.core.search.service.impl.SearchDispatcherImpl">
		<property name="services">
			<list>
				<ref bean="loServiceImpl"/>
				<ref bean="luServiceImpl"/>
			</list>
		</property>
	</bean>

	<bean id="loDictionary" class="org.kuali.student.core.dictionary.service.impl.DictionaryServiceSpringImpl">
		<constructor-arg index="0" value="classpath:lo-dictionary-config.xml" />	
	</bean>

	<bean id="loServiceImpl"
		class="org.kuali.student.lum.lo.service.impl.LearningObjectiveServiceImpl">
		<property name="loDao" ref="loDao" />
        <property name="searchManager" ref="loSearchManager" />
        <property name="dictionaryServiceDelegate" ref="loDictionary" />
        <property name="validator" ref="serviceValidator"/>
	</bean>

    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
        <property name="serviceDefinition">     
            <bean class="org.kuali.rice.ksb.messaging.SOAPServiceDefinition">
                <property name="jaxWsService" value="true" />
                <property name="service" ref="loServiceImpl" />
                <property name="serviceInterface" value="org.kuali.student.lum.lo.service.LearningObjectiveService" />
                <property name="localServiceName" value="LearningObjectiveService" />
                <property name="serviceNameSpaceURI" value="http://student.kuali.org/wsdl/lo" />
                <property name="busSecurity" value="${ks.lum.bus.security}" />
            </bean>
        </property>
    </bean>
    
       <!-- Document Relation Mock Service Config -->
		<!--Note: When this service is defined, move this declaration into core context.-->

    <bean id="documentRelationServiceImpl"
        class="org.kuali.student.lum.mock.service.impl.DocumentRelationServiceImpl">
        <property name="service" ref="luServiceImpl" />
    </bean>

    <bean class="org.kuali.rice.ksb.messaging.KSBExporter">
        <property name="serviceDefinition">     
            <bean class="org.kuali.rice.ksb.messaging.SOAPServiceDefinition">
                <property name="jaxWsService" value="true" />
                <property name="service" ref="documentRelationServiceImpl" />
                <property name="serviceInterface" value="org.kuali.student.core.mock.service.DocumentRelationService" />
                <property name="localServiceName" value="DocumentRelationService" />
                <property name="serviceNameSpaceURI" value="http://student.kuali.org/wsdl/documentRelation" />
                <property name="busSecurity" value="false"></property>
            </bean>
        </property>
    </bean>

	<!--  Preloaded data -->
	<bean id="dataLoadListenerLum" class="org.kuali.student.common.util.jpa.LoadSqlListener">
		<property name="jtaTxManager" ref="transactionManager"/>
        <property name="shouldLoadData" value="${ks.lum.doDataLoad}"/>
		<property name="preloadMap">
			<map>
				<entry key="Lo">
					<value>classpath:ks-lo.sql</value>
				</entry>
				<entry key="Lu">
					<value>classpath:ks-lu.sql</value>
				</entry>
				<entry key="Statement">
					<value>classpath:ks-statement.sql</value>
				</entry>
			</map>
		</property>
	</bean>
    
	<!-- Exception mapping. This is needed because many operations are proxied and do not throw exceptions until a later time -->
	<bean id="mapExceptionAdvisor"
		class="org.kuali.student.common.util.ExceptionMappingAdvice">
		<property name="defaultException"
			value="org.kuali.student.core.exceptions.OperationFailedException" />
		<property name="exceptionMapping">
			<map>
				<entry key="javax.persistence.EntityExistsException"
					value="org.kuali.student.core.exceptions.AlreadyExistsException" />
				<entry
					key="org.hibernate.exception.ConstraintViolationException"
					value="org.kuali.student.core.exceptions.AlreadyExistsException" />
			</map>
		</property>
	</bean>
	<aop:config>
		<aop:aspect id="dataAccessToBusinessException"
			ref="mapExceptionAdvisor">
			<aop:after-throwing
				pointcut="execution(* org.kuali.student.lum.lu.service.*.*(..))"
				method="afterThrowing" throwing="ex" />
			<aop:after-throwing
				pointcut="execution(* org.kuali.student.lum.lrc.service.*.*(..))"
				method="afterThrowing" throwing="ex" />
		</aop:aspect>
	</aop:config>
    

</beans>