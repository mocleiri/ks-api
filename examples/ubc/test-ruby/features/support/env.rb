# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

ENV["RAILS_ENV"] ||= "cucumber"
require File.expand_path(File.dirname(__FILE__) + '/../../config/environment')

require 'cucumber/formatter/unicode' # Remove this line if you don't want Cucumber Unicode support
require 'cucumber/rails/rspec'
require 'cucumber/rails/world'
require 'cucumber/rails/active_record'
require 'cucumber/web/tableish'

require 'webrat'
require 'webrat/core/matchers'
require 'webrat/selenium'
#require 'cucumber/webrat/element_locator' # Deprecated in favor of #tableish - remove this line if you don't use #element_at or #table_at

Webrat.configure do |config|
  config.open_error_files = false # Set to true if you want error pages to pop up in the browser
  config.mode = :selenium
  # put your address to CDM application
  #config.application_address = '137.82.182.56:8080/ks-embeddedM3/'
  #config.application_address = 'ksdevl1.adm.ubc.ca:8120/cdm-embedded-rc2/'
  #config.application_address = 'localhost:8080/cdm-embedded/'
  #config.application_address = 'ksdevl1.adm.ubc.ca:8115/cdm-embedded-m6/'
  #instance 1 - 'ksdevl1.adm.ubc.ca:8085/cdm-embedded'
  #config.application_address = 'ksdevl1.adm.ubc.ca:8085/cdm-embedded/'
  config.application_address = '137.82.182.177:8080/cdm-embedded/'
  #config.application_port = 8080

  config.application_framework = :external
  config.selenium_server_address = '0.0.0.0'
  config.selenium_server_port = 4444
  config.selenium_browser_key = '*chrome' 
end  


# If you set this to false, any error raised from within your app will bubble 
# up to your step definition and out to cucumber unless you catch it somewhere
# on the way. You can make Rails rescue errors and render error pages on a
# per-scenario basis by tagging a scenario or feature with the @allow-rescue tag.
#
# If you set this to true, Rails will rescue all errors and render error
# pages, more or less in the same way your application would behave in the
# default production environment. It's not recommended to do this for all
# of your scenarios, as this makes it hard to discover errors in your application.
ActionController::Base.allow_rescue = false

# If you set this to true, each scenario will run in a database transaction.
# You can still turn off transactions on a per-scenario basis, simply tagging 
# a feature or scenario with the @no-txn tag. If you are using Capybara,
# tagging with @culerity or @javascript will also turn transactions off.
#
# If you set this to false, transactions will be off for all scenarios,
# regardless of whether you use @no-txn or not.
#
# Beware that turning transactions off will leave data in your database 
# after each scenario, which can lead to hard-to-debug failures in 
# subsequent scenarios. If you do this, we recommend you create a Before
# block that will explicitly put your database in a known state.
# turn to false for Selenium testing
Cucumber::Rails::World.use_transactional_fixtures = false

# How to clean your database when transactions are turned off. See
# http://github.com/bmabey/database_cleaner for more info.
if defined?(ActiveRecord::Base)
  begin
    require 'database_cleaner'
    #DatabaseCleaner.strategy = :truncation, {:only => %w[KREW_ACTN_ITM_T KREW_ACTN_RQST_T KREW_ACTN_TKN_T KREW_DOC_HDR_CNTNT_T KREW_DOC_HDR_EXT_T KREW_DOC_HDR_T KREW_INIT_RTE_NODE_INSTN_T KREW_OUT_BOX_ITM_T KREW_RTE_BRCH_ST_T KREW_RTE_BRCH_T KREW_RTE_NODE_INSTN_LNK_T KREW_RTE_NODE_INSTN_ST_T KREW_RTE_NODE_INSTN_T KSPR_PROPOSAL KSPR_PROPOSAL_JN_REFERENCE KSPR_PROPOSAL_REFERENCE]}
    DatabaseCleaner.strategy = :truncation, {:only => %w[]}
  rescue LoadError => ignore_if_database_cleaner_not_present
  end
end