<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:search="http://student.kuali.org/xsd/search-extension"
xmlns:dict="http://student.kuali.org/xsd/dictionary-extension"
xsi:schemaLocation="
http://student.kuali.org/xsd/search-extension http://student.kuali.org/xsd/search-extension/search-extension.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
">
<!-- *** Automatically Generated ***
on: Thu Dec 17 07:15:39 EST 2009
by: org.kuali.student.search.SearchModelWriter
using: Excel Spreadsheet src/test/resources/dictionary/type-state configuration.xlsExcel Spreadsheet src/test/resources/dictionary/orchestration-dictionary.xls, 
 -->

<!-- Search Types -->

	<search:searchType id="org.search.NameAndRelatedPerson">
		<search:name>Search by name and/or related person</search:name>
		<search:desc>Returns a list of organizations with the specified name and with a specified person related to it</search:desc>
		<search:searchResultTypeInfo><ref bean="org.result.Name" /></search:searchResultTypeInfo>
		<search:searchCriteriaTypeInfo><ref bean="org.criteria.QuickNameAndRelatedPerson" /></search:searchCriteriaTypeInfo>
		</search:searchType>

	<search:searchType id="person.search.personQuickViewByGivenName">
		<search:name>All org hierarchies</search:name>
		<search:desc>Returns all org hierarchies, name and id</search:desc>
		<search:searchResultTypeInfo><ref bean="person.results.GivenName" /></search:searchResultTypeInfo>
		<search:searchCriteriaTypeInfo><ref bean="person.criteria.personGivenName" /></search:searchCriteriaTypeInfo>
		</search:searchType>

<!-- Search Criteria -->

	<search:searchCriteriaTypeInfo id="org.criteria.QuickNameAndRelatedPerson">
		<search:name>Search by name and/or related person</search:name>
		<search:desc>Search by name and/or related person</search:desc>
		<search:queryParams>
			<ref bean="org.queryParam.NameLookupField" />
			<ref bean="org.queryParam.personIds" />
			<ref bean="org.queryParam.orgPersonRelationTypes" />
			<ref bean="org.queryParam.OrganizationTypes" />
			<ref bean="org.queryParam.OrganizationStates" />
			<ref bean="kuali.queryParam.MaximumResults" />
		</search:queryParams>
		</search:searchCriteriaTypeInfo>

	<search:searchCriteriaTypeInfo id="person.criteria.personGivenName">
		<!-- TODO: Add a criteria to retrict to a particular set of departments? -->
		<search:name>No criteria</search:name>
		<search:desc>No criteria needed</search:desc>
		<search:queryParams>
			<ref bean="person.queryParam.personGivenName" />
		</search:queryParams>
		</search:searchCriteriaTypeInfo>

<!-- Search Criteria Parameters -->

	<search:queryParam id="org.queryParam.NameLookupField">
			<dict:fieldDescriptor>
			<dict:name>Name Lookup Field</dict:name>
			<dict:desc>Name of organization</dict:desc>
			<dict:dataType>string</dict:dataType>
			</dict:fieldDescriptor>
		</search:queryParam>

	<search:queryParam id="org.queryParam.personIds">
			<!-- if a person id is specified then the relation type must be specified as well -->
			<dict:fieldDescriptor>
			<dict:name>Ids of a person who must be related to this org</dict:name>
			<dict:desc>The internal identifier of the person or peope</dict:desc>
			<dict:dataType>List&lt;String&gt;</dict:dataType>
			</dict:fieldDescriptor>
		</search:queryParam>

	<search:queryParam id="org.queryParam.orgPersonRelationTypes">
			<!-- if a person id is specified then the relation type must be specified as well -->
			<dict:fieldDescriptor>
			<dict:name>Org person relation types to use to match the person</dict:name>
			<dict:desc>Type or types defining the relationship of the person to the org</dict:desc>
			<dict:dataType>List&lt;String&gt;</dict:dataType>
			</dict:fieldDescriptor>
		</search:queryParam>

	<search:queryParam id="org.queryParam.OrganizationTypes">
			<dict:fieldDescriptor>
			<dict:name>Organization Types</dict:name>
			<dict:desc>List of organization types to search</dict:desc>
			<dict:dataType>List&lt;String&gt;</dict:dataType>
			</dict:fieldDescriptor>
		</search:queryParam>

	<search:queryParam id="org.queryParam.OrganizationStates">
			<dict:fieldDescriptor>
			<dict:name>Organization States</dict:name>
			<dict:desc>List of organization states to search</dict:desc>
			<dict:dataType>List&lt;String&gt;</dict:dataType>
			</dict:fieldDescriptor>
		</search:queryParam>

	<search:queryParam id="kuali.queryParam.MaximumResults">
			<dict:fieldDescriptor>
			<dict:name>Maximum Results</dict:name>
			<dict:desc>Special parameter that limits the number of result rows that this query will return.</dict:desc>
			<dict:dataType>integer</dict:dataType>
			</dict:fieldDescriptor>
		</search:queryParam>

	<search:queryParam id="person.queryParam.personGivenName">
			<dict:fieldDescriptor>
			<dict:name>Name Lookup Field</dict:name>
			<dict:desc>Name of organization</dict:desc>
			<dict:dataType>string</dict:dataType>
			</dict:fieldDescriptor>
		</search:queryParam>

<!-- Search Results -->

	<search:searchResultTypeInfo id="org.result.Name">
		<search:name>Name (long and short)</search:name>
		<search:desc>Search that returns all the known campus locations</search:desc>
		<search:resultColumns>
			<ref bean="org.resultColumn.orgId" />
			<ref bean="org.resultColumn.orgType" />
			<ref bean="org.resultColumn.orgState" />
			<ref bean="org.resultColumn.orgShortName" />
			<ref bean="org.resultColumn.orgLongName" />
		</search:resultColumns>
		</search:searchResultTypeInfo>

	<search:searchResultTypeInfo id="person.results.GivenName">
		<search:name>ID and Given name of person</search:name>
		<search:desc>Search that returns all the known campus locations</search:desc>
		<search:resultColumns>
			<ref bean="person.resultColumn.PersonId" />
			<ref bean="person.resultColumn.GivenName" />
		</search:resultColumns>
		</search:searchResultTypeInfo>

<!-- Search Result Columns -->

	<search:resultColumn id="org.resultColumn.orgId">
		<search:name>Organization Identifier</search:name>
		<search:desc>Identifier for the organization</search:desc>
		<search:dataType>string</search:dataType>
		</search:resultColumn>

	<search:resultColumn id="org.resultColumn.orgType">
		<search:name>Organization Type</search:name>
		<search:desc>Organization Type</search:desc>
		<search:dataType>string</search:dataType>
		</search:resultColumn>

	<search:resultColumn id="org.resultColumn.orgState">
		<search:name>Organization State</search:name>
		<search:desc>Organization State</search:desc>
		<search:dataType>string</search:dataType>
		</search:resultColumn>

	<search:resultColumn id="org.resultColumn.orgShortName">
		<search:name>Organization Short Name</search:name>
		<search:desc>Short name for the organization, recorded as the default listing</search:desc>
		<search:dataType>string</search:dataType>
		</search:resultColumn>

	<search:resultColumn id="org.resultColumn.orgLongName">
		<search:name>Organization Long Name</search:name>
		<search:desc>Long name for the organization, recorded as the default listing</search:desc>
		<search:dataType>string</search:dataType>
		</search:resultColumn>

	<search:resultColumn id="person.resultColumn.PersonId">
		<search:name>Internal person id</search:name>
		<search:desc>Internal id</search:desc>
		<search:dataType>string</search:dataType>
		</search:resultColumn>

	<search:resultColumn id="person.resultColumn.GivenName">
		<search:name>Given name of person</search:name>
		<search:desc>Internal id</search:desc>
		<search:dataType>string</search:dataType>
		</search:resultColumn>

	<!-- Query Map -->
	<bean id="queryMap" class="org.springframework.beans.factory.config.MapFactoryBean">
	<property name="sourceMap">
	<map>

		<entry key="org.search.NameAndRelatedPerson"		>
			<value>
SELECT org.id, org.type.id, org.state.id, org.shortName, org.longName
FROM Org org
WHERE (org.shortName like concat (&apos;%&apos;, :org_queryParam_NameLookupField, &apos;%&apos;)
or  org.longName like concat (&apos;%&apos;, :org_queryParam_NameLookupField, &apos;%&apos;)
and (org.type.id in (:org_queryParam_OrganizationTypes) 
or :org_queryParam_OrganizationTypes is null)
and (org.state.id in (:org_queryParam_OrganizationStates) 
or :(:org_queryParam_OrganizationStates is null)
AND TODO LAYER IN LOGIC TO RESTRICT BASED ON ORG-PERSON RELATION IF A PERSON ID IS SUPPLIED
</value>
		</entry>
	</map>
	</property>
	</bean>
</beans>
