<?xml version="1.0" encoding="ISO-8859-1"?>
<!--

    Copyright 2009 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may	obtain a copy of the License at

    	http://www.osedu.org/licenses/ECL-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<xsl:stylesheet version="2.0"
	xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
	<xsl:param name="packageName"></xsl:param>
    <xsl:param name="url"></xsl:param>
    <xsl:param name="date"></xsl:param>
    <xsl:param name="user"></xsl:param>
	<xsl:strip-space elements="*" />
	<xsl:output method="text" />
	<xsl:template match="/">
		<xsl:apply-templates select="//div[@class='wiki-content'][1]" />
	</xsl:template>
	<xsl:template match="//div[@class='wiki-content'][1]">

<xsl:text>/*
 * Copyright 2009 The Kuali Foundation
 *
 * Licensed under the Educational Community License, Version 1.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.opensource.org/licenses/ecl1.php
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package </xsl:text>
<xsl:value-of select="concat($packageName, '.dto')"/>
<xsl:text>;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.kuali.student.core.ws.binding.JaxbAttributeMapListAdapter;
</xsl:text>

<!-- Determine if it implements Idable (has a 'key' or 'id' element) and if it implements
	 HasTypeState (has 'type' and 'state' elements) or HasAttributes-->
<xsl:variable name="hasKey">
	<xsl:value-of select="table[@class='structTable']/tr[position()>1]/td[@class='structSName'][text()='key']" />
</xsl:variable>
<xsl:variable name="hasId">
	<xsl:value-of select="table[@class='structTable']/tr[position()>1]/td[@class='structSName'][text()='id']" />
</xsl:variable>
<xsl:variable name="hasState">
	<xsl:value-of select="table[@class='structTable']/tr[position()>1]/td[@class='structSName'][text()='state']" />
</xsl:variable>
<xsl:variable name="hasType">
	<xsl:value-of select="table[@class='structTable']/tr[position()>1]/td[@class='structSName'][text()='type']" />
</xsl:variable>
<xsl:variable name="hasAttributes">
	<xsl:value-of select="table[@class='structTable']/tr[position()>1]/td[@class='structSName'][text()='attributes']" />
</xsl:variable>

<xsl:variable name="className">
    <xsl:value-of select="concat(upper-case(substring(normalize-space(h2),1,1)),
             substring(normalize-space(h2),2))" />
</xsl:variable>
<!-- import implemented core dto interfaces -->
<xsl:if test="string-length($hasKey)>0 or string-length($hasId)>0">
	<xsl:text>import org.kuali.student.core.dto.Idable;&#10;</xsl:text>
</xsl:if>
<xsl:if test="string-length($hasState)>0 and string-length($hasType)>0">
	<xsl:text>import org.kuali.student.core.dto.HasTypeState;&#10;</xsl:text>
</xsl:if>
<xsl:if test="string-length($hasAttributes) > 0">
	<xsl:text>import org.kuali.student.core.dto.HasAttributes;&#10;</xsl:text>
</xsl:if>

<xsl:text>
/**
 * </xsl:text>
 <xsl:value-of select="//h3[.='Description']/following-sibling::*[1]"/>
<xsl:text>&#10; *&#10;</xsl:text>
<xsl:text> * @Author KSContractMojo&#10;</xsl:text>
<xsl:text> * @Author </xsl:text><xsl:value-of select="$user"/><xsl:text>&#10;</xsl:text>
<xsl:text> * @Since </xsl:text><xsl:value-of select="$date"/><xsl:text>&#10;</xsl:text>
<xsl:text> * @See &lt;a href="</xsl:text><xsl:value-of select="$url"/><xsl:text>"&gt;</xsl:text><xsl:value-of select="$className" /><xsl:text>&lt;/&gt;&#10;</xsl:text>
<xsl:text> *
 */
@XmlAccessorType(XmlAccessType.FIELD)
public class </xsl:text>
		<xsl:value-of
			select="$className" />
		<xsl:text> implements Serializable</xsl:text>

		<xsl:if test="string-length($hasKey)>0 or string-length($hasId)>0">
			<xsl:text>, Idable</xsl:text>
		</xsl:if>
		<xsl:if test="string-length($hasState)>0 and string-length($hasType)>0">
			<xsl:text>, HasTypeState</xsl:text>
		</xsl:if>
		<xsl:if test="string-length($hasAttributes) > 0">
			<xsl:text>, HasAttributes</xsl:text>
		</xsl:if>

		<xsl:text> {&#10;</xsl:text>
		<xsl:text>&#10;    private static final long serialVersionUID = 1L;&#10;</xsl:text>
		<xsl:for-each
			select="table[@class='structTable']/tr[position()>1]">
			<xsl:choose>
				<xsl:when
					test="normalize-space(td[@class='structAttr'])='Yes'">
					<xsl:text>&#10;    @XmlAttribute</xsl:text>
					<!-- changing 'key' to 'id' in DTOs; ensure XML attribute will have 'key' -->
					<xsl:if test="normalize-space(td[@class='structSName'])='key'" >
						<xsl:text>(name="key")</xsl:text>
					</xsl:if>
				</xsl:when>
				<xsl:otherwise>
					<xsl:text>&#10;    @XmlElement</xsl:text>
					<!-- changing 'key' to 'id' in DTOs; ensure XML element will be 'key' -->
					<xsl:if test="normalize-space(td[@class='structSName'])='key'" >
						<xsl:text>("key")</xsl:text>
					</xsl:if>
				</xsl:otherwise>
			</xsl:choose>
			<xsl:text>&#10;</xsl:text>
			<xsl:if test="normalize-space(td[@class='structType'])='attributeInfoList'">
				<xsl:text>    @XmlJavaTypeAdapter(JaxbAttributeMapListAdapter.class)&#10;</xsl:text>
			</xsl:if>
			<xsl:text>    private </xsl:text>
			<xsl:call-template name="deriveType" />
			<xsl:text> </xsl:text>
			<xsl:call-template name="deriveFieldName" />
			<xsl:text>;&#10;</xsl:text>

		</xsl:for-each>

		<!-- do getters/setters -->
		<xsl:for-each
			select="table[@class='structTable']/tr[position()>1]">
			<!-- Do Getter -->
			<xsl:text>&#10;    /**&#10;     * </xsl:text>
			<xsl:value-of
				select="normalize-space(td[@class='structDesc'])" />
			<xsl:text>&#10;     */</xsl:text>
			<xsl:text>&#10;    public </xsl:text>
			<xsl:call-template name="deriveType" />
			<xsl:text> get</xsl:text>
			<xsl:call-template name="deriveInitialCapFieldName" />
			<!--
			<xsl:value-of
				select="concat(upper-case(substring(normalize-space(td[@class='structSName']),1,1)),
             substring(normalize-space(td[@class='structSName']),2))" />
			-->
			<xsl:text>() {&#10;</xsl:text>
			<!-- Add initialization if list -->
			<xsl:if
				test="ends-with(normalize-space(td[@class='structType']),'List')">
				<xsl:text>        if (</xsl:text>
				<xsl:value-of
					select="normalize-space(td[@class='structSName'])" />
				<xsl:text> == null) {&#10;</xsl:text>
				<xsl:text>            </xsl:text>
				<xsl:value-of
					select="normalize-space(td[@class='structSName'])" />
				<xsl:choose>
					<xsl:when test="normalize-space(td[@class='structType'])='attributeInfoList'">
						<xsl:text> = new Hash</xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:text> = new Array</xsl:text>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:call-template name="deriveType" />
                <xsl:choose>
                    <xsl:when test="normalize-space(td[@class='structType'])='attributeInfoList'">
                        <xsl:text>();&#10;</xsl:text>
                   </xsl:when>
                    <xsl:otherwise>
                        <xsl:text>(0);&#10;</xsl:text>
                   </xsl:otherwise>
                </xsl:choose>
				<xsl:text>        }&#10;</xsl:text>
			</xsl:if>
			<xsl:text>        return </xsl:text>
			<xsl:call-template name="deriveFieldName" />
			<!--
			<xsl:value-of
				select="normalize-space(td[@class='structSName'])" />
			-->
			<xsl:text>;&#10;</xsl:text>
			<xsl:text>    }&#10;</xsl:text>

			<!-- Do Setter -->
			<xsl:text>&#10;    public void set</xsl:text>
			<xsl:call-template name="deriveInitialCapFieldName" />
			<!--
			<xsl:value-of
				select="concat(upper-case(substring(normalize-space(td[@class='structSName']),1,1)),
             substring(normalize-space(td[@class='structSName']),2))" />
			-->
			<xsl:text>(</xsl:text>
			<xsl:call-template name="deriveType" />
			<xsl:text> </xsl:text>
			<xsl:call-template name="deriveFieldName" />
			<!--
			<xsl:value-of
				select="normalize-space(td[@class='structSName'])" />
			-->
			<xsl:text>) {&#10;</xsl:text>
			<xsl:text>        this.</xsl:text>
			<xsl:call-template name="deriveFieldName" />
			<!--
			<xsl:value-of
				select="normalize-space(td[@class='structSName'])" />
			-->
			<xsl:text> = </xsl:text>
			<xsl:call-template name="deriveFieldName" />
			<!--
			<xsl:value-of
				select="normalize-space(td[@class='structSName'])" />
			-->
			<xsl:text>;&#10;</xsl:text>
			<xsl:text>    }&#10;</xsl:text>
		</xsl:for-each>

		<xsl:text>}</xsl:text>
	</xsl:template>

	<xsl:template name="deriveType">
		<xsl:choose>
		    <xsl:when test="normalize-space(td[@class='structType'])='attributeInfoList'">
		    	<xsl:text>Map&lt;String, String&gt;</xsl:text>
		    </xsl:when>
			<xsl:when
				test="ends-with(normalize-space(td[@class='structType']),'List')">
                <xsl:variable name="listType">
                  <xsl:value-of
                    select="concat(upper-case(substring(normalize-space(td[@class='structType']),1,1)),
             substring(normalize-space(td[@class='structType']),2,string-length(normalize-space(td[@class='structType']))-5))" />
                </xsl:variable>

				<xsl:text>List&lt;</xsl:text>
                <xsl:choose>
                    <xsl:when test="ends-with($listType, 'Id') or ends-with($listType, 'Key')">
                        <xsl:text>String</xsl:text>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:value-of select="$listType" />
                    </xsl:otherwise>
                </xsl:choose>
				<xsl:text>&gt;</xsl:text>
			</xsl:when>
			<xsl:when
				test="normalize-space(td[@class='structType'])='dateTime'">
				<xsl:text>Date</xsl:text>
			</xsl:when>
			<xsl:when
				test="ends-with(normalize-space(td[@class='structType']),'Id')">
				<xsl:text>String</xsl:text>
			</xsl:when>
			<xsl:when
				test="ends-with(normalize-space(td[@class='structType']),'Type')">
				<xsl:text>String</xsl:text>
			</xsl:when>
			<xsl:when
				test="ends-with(normalize-space(td[@class='structType']),'Key')">
				<xsl:text>String</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of
					select="concat(upper-case(substring(normalize-space(td[@class='structType']),1,1)),
             substring(normalize-space(td[@class='structType']),2))" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template name="deriveFieldName">
		<!-- change 'key' in the contract to 'id' in DTO's -->
		<xsl:variable name="fieldName">
			<xsl:value-of select="normalize-space(td[@class='structSName'])" />
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$fieldName='key'">
				<xsl:text>id</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$fieldName" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

	<xsl:template name="deriveInitialCapFieldName">
		<!-- change 'key' in the contract to 'id' in DTO's -->
		<xsl:variable name="fieldName">
			<xsl:value-of select="normalize-space(td[@class='structSName'])" />
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$fieldName='key'">
				<xsl:text>Id</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="concat(upper-case(substring($fieldName, 1, 1)),
											 substring($fieldName, 2))" />
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>

</xsl:stylesheet>
